/**
 * This program will solve a Rubik's Cube Puzzle using the
 * two phase algorithm described by Herbert Kociemba at
 * http://kociemba.org/cube.htm
 *
 * This is for private use only, not for release
 *
 * @author Russell Feldhausen
 * @version 1.0 2008.12.04
 */

package rubiksolver;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.JButton;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import rubiksolver.RubikModel2.*;
import rubiksolverdef.CubieCube;

/**
 * This class displays the cube, and allows editing
 */
public class ViewCube2 extends javax.swing.JFrame implements ActionListener {
    
    private JButton[][] up, down, left, right, back, front;
    private boolean canEdit;
    RubikDisplay2 parent;
    RubikModel2 model;

    /** Creates new form ViewCube */
    public ViewCube2(RubikDisplay2 myParent, RubikModel2 aModel) {
        initComponents();
        parent = myParent;
        model = aModel;
        canEdit = false;
        btn_save.setEnabled(canEdit);
        this.setSize(400, 500);
        up = new JButton[3][3];
        down = new JButton[3][3];
        left = new JButton[3][3];
        right = new JButton[3][3];
        back = new JButton[3][3];
        front = new JButton[3][3];
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                up[i][j] = new JButton();
                up[i][j].addActionListener(this);
                up[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(up[i][j], new AbsoluteConstraints(110 + 35 * i, 5 + 35 * j));
                down[i][j] = new JButton();
                down[i][j].addActionListener(this);
                down[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(down[i][j], new AbsoluteConstraints(110 + 35 * i, 215 + 35 * j));
                left[i][j] = new JButton();
                left[i][j].addActionListener(this);
                left[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(left[i][j], new AbsoluteConstraints(5 + 35 * i, 110 + 35 * j));
                right[i][j] = new JButton();
                right[i][j].addActionListener(this);
                right[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(right[i][j], new AbsoluteConstraints(215 + 35 * i, 110 + 35 * j));
                back[i][j] = new JButton();
                back[i][j].addActionListener(this);
                back[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(back[i][j], new AbsoluteConstraints(110 + 35 * i, 320 + 35 * j));
                front[i][j] = new JButton();
                front[i][j].addActionListener(this);
                front[i][j].setPreferredSize(new Dimension(30, 30));
                this.getContentPane().add(front[i][j], new AbsoluteConstraints(110 + 35 * i, 110 + 35 * j));
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btn_save = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        btn_save.setText("Save");
        btn_save.setEnabled(false);
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        getContentPane().add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * This function saves the cube created
 * @param evt
 */
    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        CubieCube cc = new CubieCube();
        cc.c.a[Corner.URF.ordinal()] = model.IDCorner(up[2][2].getBackground(), right[0][0].getBackground(), front[2][0].getBackground());
        cc.c.a[Corner.UFL.ordinal()] = model.IDCorner(up[0][2].getBackground(), front[0][0].getBackground(), left[2][0].getBackground());
        cc.c.a[Corner.ULB.ordinal()] = model.IDCorner(up[0][0].getBackground(), left[0][0].getBackground(), back[0][2].getBackground());
        cc.c.a[Corner.UBR.ordinal()] = model.IDCorner(up[2][0].getBackground(), back[2][2].getBackground(), right[2][0].getBackground());
        cc.c.a[Corner.DFR.ordinal()] = model.IDCorner(down[2][0].getBackground(), front[2][2].getBackground(), right[0][2].getBackground());
        cc.c.a[Corner.DLF.ordinal()] = model.IDCorner(down[0][0].getBackground(), left[2][2].getBackground(), front[0][2].getBackground());
        cc.c.a[Corner.DBL.ordinal()] = model.IDCorner(down[0][2].getBackground(), back[0][0].getBackground(), left[0][2].getBackground());
        cc.c.a[Corner.DRB.ordinal()] = model.IDCorner(down[2][2].getBackground(), right[2][2].getBackground(), back[2][0].getBackground());
        
        cc.e.a[Edge.UR.ordinal()] = model.IDEdge(up[2][1].getBackground(), right[1][0].getBackground());
        cc.e.a[Edge.UF.ordinal()] = model.IDEdge(up[1][2].getBackground(), front[1][0].getBackground());
        cc.e.a[Edge.UL.ordinal()] = model.IDEdge(up[0][1].getBackground(), left[1][0].getBackground());
        cc.e.a[Edge.UB.ordinal()] = model.IDEdge(up[1][0].getBackground(), back[1][2].getBackground());
        cc.e.a[Edge.DR.ordinal()] = model.IDEdge(down[2][1].getBackground(), right[1][2].getBackground());
        cc.e.a[Edge.DF.ordinal()] = model.IDEdge(down[1][0].getBackground(), front[1][2].getBackground());
        cc.e.a[Edge.DL.ordinal()] = model.IDEdge(down[0][1].getBackground(), left[1][2].getBackground());
        cc.e.a[Edge.DB.ordinal()] = model.IDEdge(down[1][2].getBackground(), back[1][0].getBackground());
        cc.e.a[Edge.FR.ordinal()] = model.IDEdge(front[2][1].getBackground(), right[0][1].getBackground());
        cc.e.a[Edge.FL.ordinal()] = model.IDEdge(front[0][1].getBackground(), left[2][1].getBackground());
        cc.e.a[Edge.BL.ordinal()] = model.IDEdge(back[0][1].getBackground(), left[0][1].getBackground());
        cc.e.a[Edge.BR.ordinal()] = model.IDEdge(back[2][1].getBackground(), right[2][1].getBackground());
        
        parent.setCube(cc);
    }//GEN-LAST:event_btn_saveActionPerformed
    
    /**
     * This function shows the cube given as input.
     *
     * @param cc - CubieCube input
     * @param create - if true, allow saving the changes to the cube
     */
    public void showCube(CubieCube cc, boolean create){
        canEdit = create;
        btn_save.setEnabled(canEdit);
        
        int corner = cc.c.a[Corner.URF.ordinal()].c.ordinal();
        int ori = cc.c.a[Corner.URF.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            up[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            right[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            front[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            up[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            right[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            front[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.UFL.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.UFL.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            up[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            front[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            left[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            up[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            front[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            left[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.ULB.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.ULB.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            up[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            left[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            back[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            up[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            left[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            back[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.UBR.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.UBR.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            up[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            back[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            right[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            up[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            back[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            right[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
   
        corner = cc.c.a[Corner.DFR.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.DFR.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            down[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            front[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            right[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            down[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            front[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            right[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.DLF.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.DLF.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            down[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            left[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            front[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            down[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            left[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            front[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.DBL.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.DBL.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            down[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            back[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            left[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            down[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            back[0][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            left[0][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        corner = cc.c.a[Corner.DRB.ordinal()].c.ordinal();
        ori = cc.c.a[Corner.DRB.ordinal()].o;
        if(ori % 3 == 2){
            ori -= 1;
        }else if(ori % 3 == 1){
            ori += 1;
        }
        if(ori >= 3){
            down[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori % 3])); 
            right[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
            back[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
        }else{
            down[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][ori])); 
            right[2][2].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 1) % 3]));
            back[2][0].setBackground(model.ColorIndexToColor(model.CCI.a[corner][(ori + 2) % 3]));
        }
        
        int edge = cc.e.a[Edge.UR.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.UR.ordinal()].o;
        up[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        right[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.UF.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.UF.ordinal()].o;
        up[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        front[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.UL.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.UL.ordinal()].o;
        up[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        left[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.UB.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.UB.ordinal()].o;
        up[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        back[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.DR.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.DR.ordinal()].o;
        down[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        right[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.DF.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.DF.ordinal()].o;
        down[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        front[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.DL.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.DL.ordinal()].o;
        down[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        left[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.DB.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.DB.ordinal()].o;
        down[1][2].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        back[1][0].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.FR.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.FR.ordinal()].o;
        front[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        right[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.FL.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.FL.ordinal()].o;
        front[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        left[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.BL.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.BL.ordinal()].o;
        back[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        left[0][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        edge = cc.e.a[Edge.BR.ordinal()].e.ordinal();
        ori = cc.e.a[Edge.BR.ordinal()].o;
        back[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][ori]));
        right[2][1].setBackground(model.ColorIndexToColor(model.ECI.a[edge][(ori + 1) % 2]));
        
        up[1][1].setBackground(Color.ORANGE);
        down[1][1].setBackground(Color.RED);
        left[1][1].setBackground(Color.GREEN);
        right[1][1].setBackground(Color.BLUE);
        back[1][1].setBackground(Color.YELLOW);
        front[1][1].setBackground(Color.WHITE);

        up[1][1].setEnabled(false);
        down[1][1].setEnabled(false);
        left[1][1].setEnabled(false);
        right[1][1].setEnabled(false);
        back[1][1].setEnabled(false);
        front[1][1].setEnabled(false);

        this.setVisible(true);
    }

    /**
     * This function cycles the colors of the cube facelets
     *
     * @param e - the button click action
     */
    public void actionPerformed(ActionEvent e){
        JButton pressed = (JButton)e.getSource();
        if(pressed.getBackground() == Color.WHITE){
            pressed.setBackground(Color.RED);
        }else if(pressed.getBackground() == Color.RED){
            pressed.setBackground(Color.ORANGE);
        }else if(pressed.getBackground() == Color.ORANGE){
            pressed.setBackground(Color.YELLOW);
        }else if(pressed.getBackground() == Color.YELLOW){
            pressed.setBackground(Color.GREEN);
        }else if(pressed.getBackground() == Color.GREEN){
            pressed.setBackground(Color.BLUE);
        }else if(pressed.getBackground() == Color.BLUE){
            pressed.setBackground(Color.WHITE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_save;
    // End of variables declaration//GEN-END:variables
    
}
