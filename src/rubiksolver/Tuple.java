/**
 * This program will solve a Rubik's Cube Puzzle using the
 * two phase algorithm described by Herbert Kociemba at
 * http://kociemba.org/cube.htm
 *
 * This is for private use only, not for release
 *
 * @author Russell Feldhausen
 * @version 1.0 2008.12.04
 */

package rubiksolver;

/**
 * This class is used to store the coordinates for Phase2 of the algorithm
 */
public class Tuple {
    public int CornPermCoord;
    public int EdgePermCoord;
    public int UDSliceCoord;
    public int CornPermRawCoord;
    public String backtrace;
    public java.util.LinkedList<Integer> moves;

    /**
     * This constructor initializes the variables
     *
     * @param x - a Corner Permutation Coordinate
     * @param y - an Edge Permutation Coordinate
     * @param z - a UDSlice Coordinate
     * @param w - the Raw Corner Permutation Coordinate
     * @param bt - the backtrace of moves
     * @param moveList - a list of the moves as integers
     */
    public Tuple(int x, int y, int z, int w, String bt, java.util.LinkedList<Integer> moveList){
        CornPermCoord = x;
        EdgePermCoord = y;
        UDSliceCoord = z;
        CornPermRawCoord = w;
        backtrace = bt;
        moves = moveList;
    }

    @Override
    /**
     * This function overrides the default equals
     *
     * @return - true if the coordinates are exactly equal
     */
    public boolean equals(Object inputO){
        try{
            Tuple input = (Tuple)inputO;
            if(CornPermCoord == input.CornPermCoord && input.EdgePermCoord == EdgePermCoord && input.UDSliceCoord == UDSliceCoord && CornPermRawCoord == input.CornPermRawCoord){
                return true;
            }else{
                return false;
            }
        }catch(Exception e){
            return false;
        }
    }

    @Override
    /**
     * This function is the default hashCode generated by Netbeans
     *
     * @return - the hash code
     */
    public int hashCode() {
        int hash = 5;
        hash = 97 * hash + this.CornPermCoord;
        hash = 97 * hash + this.EdgePermCoord;
        hash = 97 * hash + this.UDSliceCoord;
        return hash;
    }
    
}
